#!/usr/bin/env python
import rospy
from distributed.msg import History, Intlist
from math import sqrt, atan2, exp, atan, cos, sin, acos, pi, asin, atan2
import numpy as np
from time import sleep
import tf
import scipy.io
import rospkg
import sys


rp = rospkg.RosPack()
path = rp.get_path('distributed')
path = path + '/CPP'
sys.path.insert(0, path)
import cppsolver
import library2018 as myLib
import Task_Assignment as TA





def choose_depots():



    return
# ----------  ----------  ----------  ----------  ----------




def define_subsets(list_of_H,virtual_graph):

    pts_0 = virtual_graph['nodes']

    H0 = list_of_H[0] #History of robot 0
    H1 = list_of_H[1] #History of robot 1

    set_uv = []
    set_v = []
    pts = []
    for k in range(len(pts_0)):
        if (k+1 in H0.e_v or k+1 in H1.e_v) and k+1 != H0.currEdge and k+1 != H1.currEdge:
        #if (k+1 in H0.e_v or k+1 in H1.e_v):
            set_v.append(k + 1)
        else:
            set_uv.append(k+1)
            pts.append(pts_0[k])
        """
        if not k+1 in H0.e_v and not k+1 in H1.e_v:
            set_uv.append(k+1)
            pts.append(pts_0[k])
        else:
            set_v.append(k + 1)
        """

    #set_v = []
    #for k in range(len(pts_0)):
    #    if (not k + 1 in set_uv):
    #        set_v.append(k + 1)

    return set_uv,set_v, pts
# ----------  ----------  ----------  ----------  ----------



def replanning(original_graph, virtual_graph, list_of_H, list_of_robs, list_of_vels):


    # 'cahnde_plan' is True if the new plan is better than the old one
    change_plan = False

    H0 = list_of_H[0] #History of robot 0
    H1 = list_of_H[1] #History of robot 1


    set_uv, set_v, pts = define_subsets(list_of_H,virtual_graph)

    # Map the unvisited nodes with new labels
    C = virtual_graph['Ccom']
    Cuv = np.matrix(C) # Reduced cost matrix with only the unvisited edges (unvisited virtual nodes)
    exclude_list = (np.array(set_v)-1).tolist()
    Cuv = np.delete(Cuv, exclude_list, 0) # exclude lines
    Cuv = np.delete(Cuv, exclude_list, 1) # exclude columns
    Cuv = Cuv.tolist()

    #print H0
    #print H1


    #choose_depots()

    depots = [set_uv.index(H0.currEdge), set_uv.index(H1.currEdge)]
    speeds = [1, 1.1]
    colors = ['b', 'r']

    print '\n'
    print 'depots = ', depots
    print 'speeds = ', speeds
    print 'size of Cuv = ', len(Cuv), 'x', len(Cuv[0])
    print '\n'
    print 'Executing task assignment problem'
    TA.execute_lp(speeds, depots, colors, Cuv, pts)
    print 'Returned from TA.execute_lp function'


    show_map = []
    for k in range(len(Cuv)):
        show_map.append([k+1,set_uv[k]])
    show_map = np.matrix(show_map)
    print '\n Here is show map'
    print show_map

    """
    print '\nHere is Cuv:'
    print Cuv

    print '\nHere is set_uv:'
    print set_uv
    print '\n'

    print '\nHere is set_v:'
    print set_v
    print '\n'
    
    print '\nlen(set_uv) = ', len(set_uv)
    print 'len(set_v) = ', len(set_v)
    print 'len(Cuv) = ', len(Cuv)
    print 'len(Cuv[0]) = ', len(Cuv[0])
    print '\n'
    """


    # Call the task assignment function

    # Map the solution back to the original indexes

    # Call MST for every robot in the communication graph

    # Cal CPP for every graph generated by the MST base algorithm











    return change_plan
# ----------  ----------  ----------  ----------  ----------





